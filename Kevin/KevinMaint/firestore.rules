rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Restaurant owners can read/write their restaurant data
    match /restaurants/{restaurantId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.ownerId == request.auth.uid);
    }
    
    // Business owners can read/write their business data
    match /businesses/{businessId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.ownerId == request.auth.uid);
    }
    
    // Issues - authenticated users can create, restaurant owners can manage
    match /issues/{issueId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reporterId;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.reporterId || 
         isRestaurantOwner(resource.data.restaurantId));
    }
    
    // Locations - restaurant owners can manage
    match /locations/{locationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        isRestaurantOwner(request.resource.data.restaurantId);
    }
    
    // Work orders - restaurant owners and assignees can manage
    match /workOrders/{workOrderId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (isRestaurantOwner(request.resource.data.restaurantId) ||
         request.auth.uid == request.resource.data.assigneeId);
    }
    
    // Work logs - assignees can create, restaurant owners can read
    match /workLogs/{workLogId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
    }
    
    // Issue photos - linked to issues permissions
    match /issuePhotos/{photoId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Receipts - linked to issues permissions
    match /receipts/{receiptId} {
      allow read, list: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Documents collection
    match /documents/{documentId} {
      allow read, list: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Maintenance requests
    match /maintenance_requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }
    
    // Conversations - all authenticated users can access
    match /conversations/{conversationId} {
      allow read, list: if request.auth != null;
      allow write, create: if request.auth != null;
      allow update, delete: if request.auth != null;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, list: if request.auth != null;
        allow write, create: if request.auth != null;
        allow update, delete: if request.auth != null;
      }
    }
    
    // Notification triggers - system can write, admins can read
    match /notificationTriggers/{triggerId} {
      allow read: if request.auth != null && isKevinAdmin();
      allow write: if request.auth != null;
    }
    
    // Debug logs - allow all authenticated users to write for debugging
    match /debug_logs/{logId} {
      allow read: if request.auth != null && isKevinAdmin();
      allow write: if request.auth != null;
    }
    
    // Helper function to check if user owns the restaurant
    function isRestaurantOwner(restaurantId) {
      return exists(/databases/$(database)/documents/restaurants/$(restaurantId)) &&
        get(/databases/$(database)/documents/restaurants/$(restaurantId)).data.ownerId == request.auth.uid;
    }
    
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isKevinAdmin();
      // Allow querying users collection for admin role lookup and notifications
      allow list: if request.auth != null;  // Allow all authenticated users to query for notifications
    }
    
    // Helper function to check if user is Kevin admin
    // Use hardcoded admin emails to avoid circular dependency
    function isKevinAdmin() {
      return request.auth != null && 
        request.auth.token.email in ['chriscashion@gmail.com', 'chris.cashion@gmail.com', 'kevind.cashion@gmail.com'];
    }
  }
}
